{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Squape","text":""},{"location":"#squape-squish-api-python-extension","title":"SQUAPE - Squish API Python Extension","text":"<p>Python package that extends Squish Python API. It provides tools for everyday automated test cases development.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>The minimal requirement for the SQUAPE package is Squish version 6.7.0. Individual features may require a more recent Squish package. </p>"},{"location":"#installation","title":"Installation","text":"<p>The package is available on the Python Package Index (PyPI). You can install it via <code>pip</code> with the following commands:</p> <pre><code>pip install squape\n</code></pre>"},{"location":"#content","title":"Content","text":"<p>The package consists of several modules:  </p> <ul> <li>object_tree - seamless object tree navigation and search capabilities  </li> <li>report - adds features to enhance the reporting capabilities of Squish  </li> <li>settings - makes using various test settings easier and cleaner  </li> <li>squishserver - managing squishservers and (un)registering AUTs  </li> <li>video - adds features to enhance video capture capabilities of Squish  </li> <li>vps - extension of Squish verification points  </li> </ul>"},{"location":"#contribution","title":"Contribution","text":"<p>The package is created and maintained by Cyber Alpaca Pull requests for any issues are welcome. In case where you would like to introduce a new feature or a major change, please open an issue first and discuss it with our team.</p>"},{"location":"#license","title":"License","text":"<p>The packages are available under The 3-Clause BSD License</p>"},{"location":"#references","title":"References","text":"<ul> <li>Squish by the Qt Group </li> </ul>"},{"location":"reference/object_tree/","title":"squape.object_tree","text":""},{"location":"reference/object_tree/#squape.object_tree.children","title":"children","text":"<pre><code>children(object_or_name, selector)\n</code></pre> <p>Finds direct children of the given object.</p> <p>Parameters:</p> Name Type Description Default <code>object_or_name</code> <code>any</code> <p>symbolic name, real name, or object reference.</p> required <code>selector</code> <code>dict</code> <p>The selector is a dictionary of key-value pairs, The selector is a dictionary consisting of key-value pairs. In this dictionary: - Each key represents a property of an object. - Each value can either be an expected value for that property or a function that takes exactly one argument.</p> <p>Additionally, the dictionary can have a key 'type' where the value should be the expected object type. An object will pass verification if the object's property value matches the selector value.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>Children objects that met the selector criteria.</p> <p>Examples:</p> <pre><code>children(object_or_name, {'type' : QToolButton, 'height': 50})\nchildren(object_or_name, {'type' : 'Button', 'visible' : True})\nchildren(object_or_name, {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25})\n\ndef height_filter_function(height: int) -&gt; bool:\n    return height &gt; 30 and height &lt; 120\nchildren(\n    object_or_name,\n    {'type' : 'QToolButton', 'height' : height_filter_function}\n)\n</code></pre> Source code in <code>squape/object_tree.py</code> <pre><code>def children(object_or_name: any, selector: dict) -&gt; tuple:\n    \"\"\"\n    Finds direct children of the given object.\n\n    Args:\n        object_or_name (any): symbolic name, real name, or object reference.\n\n        selector (dict): The selector is a dictionary of key-value pairs,\n            The selector is a dictionary consisting of key-value pairs.\n            In this dictionary:  \n            - Each key represents a property of an object.  \n            - Each value can either be an expected value for that property\n            or a function that takes exactly one argument.\n\n            Additionally, the dictionary can have a key 'type'\n            where the value should be the expected object type.\n            An object will pass verification\n            if the object's property value matches the selector value.\n\n    Returns:\n        Children objects that met the selector criteria.\n\n    Examples:\n        ```python\n        children(object_or_name, {'type' : QToolButton, 'height': 50})\n        children(object_or_name, {'type' : 'Button', 'visible' : True})\n        children(object_or_name, {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25})\n\n        def height_filter_function(height: int) -&gt; bool:\n            return height &gt; 30 and height &lt; 120\n        children(\n            object_or_name,\n            {'type' : 'QToolButton', 'height' : height_filter_function}\n        )\n        ```\n    \"\"\"\n    object_reference = _get_object_reference(object_or_name)\n    children = object.children(object_reference)\n    return tuple(filter(lambda x: _is_matching(x, selector), children))\n</code></pre>"},{"location":"reference/object_tree/#squape.object_tree.find","title":"find","text":"<pre><code>find(object_or_name, selector=None, max_depth=None)\n</code></pre> <p>Finds descendants of the given object.</p> <p>Parameters:</p> Name Type Description Default <code>object_or_name</code> <code>any</code> <p>symbolic name, real name, or object reference.</p> required <code>selector</code> <code>dict</code> <p>The selector is a dictionary of key-value pairs, where a key is a property of an object  and value is expected value or function. The passed functions must accept exactly one argument. Accepted key is also 'type' and then value should by object type. An object will pass verification if the object's property value matches the selector value. Defaults to {}, which means all objects pass the verification.</p> <code>None</code> <code>max_depth</code> <code>int</code> <p>defines maximum depth in the object structure that should be while looking for children. Defaults to None, which mean there is no depth limit.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>Descendants of the given object that met the selector criteria.</p> <p>Examples:</p> <pre><code>find(object_or_name)\nfind(object_or_name, {'type' : 'ToolBar'})\nfind(object_or_name, max_depth=5)\nfind(object_or_name, {'visible' : True}, max_depth=3)\nfind(\n    object_or_name,\n    {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25},\n    max_depth=5\n)\n\ndef height_filter_function(height: int) -&gt; bool:\n    return height &gt; 30 and height &lt; 120\nfind(\n    object_or_name,\n    {'type' : 'QToolButton', 'height' : height_filter_function}\n)\n</code></pre> Source code in <code>squape/object_tree.py</code> <pre><code>def find(object_or_name: any, selector: dict = None, max_depth: int = None) -&gt; tuple:\n    \"\"\"\n    Finds descendants of the given object.\n\n    Args:\n        object_or_name (any): symbolic name, real name, or object reference.\n\n        selector (dict, optional): The selector is a dictionary of key-value pairs,\n            where a key is a property of an object  and value is expected value\n            or function. The passed functions must accept exactly one argument.\n            Accepted key is also 'type' and then value should by object type.\n            An object will pass verification\n            if the object's property value matches the selector value.\n            Defaults to {}, which means all objects pass the verification.\n\n        max_depth (int): defines maximum depth in the object structure that should be\n            while looking for children.\n            Defaults to None, which mean there is no depth limit.\n\n    Returns:\n        Descendants of the given object that met the selector criteria.\n\n    Examples:\n        ```python\n        find(object_or_name)\n        find(object_or_name, {'type' : 'ToolBar'})\n        find(object_or_name, max_depth=5)\n        find(object_or_name, {'visible' : True}, max_depth=3)\n        find(\n            object_or_name,\n            {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25},\n            max_depth=5\n        )\n\n        def height_filter_function(height: int) -&gt; bool:\n            return height &gt; 30 and height &lt; 120\n        find(\n            object_or_name,\n            {'type' : 'QToolButton', 'height' : height_filter_function}\n        )\n        ```\n    \"\"\"\n    if max_depth is None:\n        max_depth = math.inf\n    if max_depth &lt;= 0:\n        return ()\n    if selector is None:\n        selector = {}\n\n    object_reference = _get_object_reference(object_or_name)\n    children = ()\n\n    for child in object.children(object_reference):\n        if _is_matching(child, selector):\n            children += (child,)\n        children += find(child, selector, max_depth - 1)\n\n    return children\n</code></pre>"},{"location":"reference/object_tree/#squape.object_tree.find_ancestor","title":"find_ancestor","text":"<pre><code>find_ancestor(object_or_name, selector)\n</code></pre> <p>Find the first object's ancestor that matches the selector.</p> <p>Parameters:</p> Name Type Description Default <code>object_or_name</code> <code>any</code> <p>symbolic name, real name, or object reference.</p> required <code>selector</code> <code>dict</code> <p>The selector is a dictionary of key-value pairs, where a key is a property of an object  and value is expected value or function. The passed functions must accept exactly one argument. Accepted key is also 'type' and then value should by object type. An object will pass verification if the object's property value matches the selector value.</p> required <p>Returns:</p> Type Description <code>Squish object / None</code> <p>The ancestor object that matches the selector.</p> <p>Examples:</p> <pre><code>find_ancestor(object_or_name)\nfind_ancestor(object_or_name, {'type' : 'MyContainerType'})\nfind_ancestor(\n    object_or_name,\n    {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25}\n)\n\ndef height_filter_function(height: int) -&gt; bool:\n    return height &gt; 30 and height &lt; 120\nfind_ancestor(\n    object_or_name,\n    {'type' : 'QToolButton', 'height' : height_filter_function}\n)\n</code></pre> Source code in <code>squape/object_tree.py</code> <pre><code>def find_ancestor(object_or_name: any, selector: dict):\n    \"\"\"\n    Find the first object's ancestor that matches the selector.\n\n    Args:\n        object_or_name (any): symbolic name, real name, or object reference.\n\n        selector (dict): The selector is a dictionary of key-value pairs,\n            where a key is a property of an object  and value is expected value\n            or function. The passed functions must accept exactly one argument.\n            Accepted key is also 'type' and then value should by object type.\n            An object will pass verification\n            if the object's property value matches the selector value.\n\n    Returns:\n        (Squish object / None): The ancestor object that matches the selector.\n\n    Examples:\n        ```python\n        find_ancestor(object_or_name)\n        find_ancestor(object_or_name, {'type' : 'MyContainerType'})\n        find_ancestor(\n            object_or_name,\n            {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25}\n        )\n\n        def height_filter_function(height: int) -&gt; bool:\n            return height &gt; 30 and height &lt; 120\n        find_ancestor(\n            object_or_name,\n            {'type' : 'QToolButton', 'height' : height_filter_function}\n        )\n        ```\n    \"\"\"\n    object_reference = _get_object_reference(object_or_name)\n    parent = object.parent(object_reference)\n\n    if parent is None:\n        return None\n\n    if _is_matching(object.parent(object_reference), selector):\n        return parent\n\n    return find_ancestor(parent, selector)\n</code></pre>"},{"location":"reference/object_tree/#squape.object_tree.siblings","title":"siblings","text":"<pre><code>siblings(object_or_name, selector=None)\n</code></pre> <p>Find the object's siblings.</p> <p>Parameters:</p> Name Type Description Default <code>object_or_name</code> <code>any</code> <p>symbolic name, real name, or object reference.</p> required <code>selector</code> <code>dict</code> <p>The selector is a dictionary of key-value pairs, where a key is a property of an object  and value is expected value or function. The passed functions must accept exactly one argument. Accepted key is also 'type' and then value should by object type. An object will pass verification if the object's property value matches the selector value. Defaults to {}, which means all objects pass the verification.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple</code> <p>Siblings of the given object that met the selector criteria.</p> <p>Examples:</p> <pre><code>siblings(object)\nsiblings(object, {'enabled' : True})\nsiblings(object_or_name, {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25})\n\ndef height_filter_function(height: int) -&gt; bool:\n    return height &gt; 30 and height &lt; 120\nsiblings(\n    object_or_name,\n    {'type' : 'QToolButton', 'height' : height_filter_function}\n)\n</code></pre> Source code in <code>squape/object_tree.py</code> <pre><code>def siblings(object_or_name: any, selector: dict = None) -&gt; tuple:\n    \"\"\"\n    Find the object's siblings.\n\n    Args:\n        object_or_name (any): symbolic name, real name, or object reference.\n\n        selector (dict, optional): The selector is a dictionary of key-value pairs,\n            where a key is a property of an object  and value is expected value\n            or function. The passed functions must accept exactly one argument.\n            Accepted key is also 'type' and then value should by object type.\n            An object will pass verification\n            if the object's property value matches the selector value.\n            Defaults to {}, which means all objects pass the verification.\n\n    Returns:\n        Siblings of the given object that met the selector criteria.\n\n    Examples:\n        ```python\n        siblings(object)\n        siblings(object, {'enabled' : True})\n        siblings(object_or_name, {'type' : 'QToolButton', 'height' : lambda x: x &gt; 25})\n\n        def height_filter_function(height: int) -&gt; bool:\n            return height &gt; 30 and height &lt; 120\n        siblings(\n            object_or_name,\n            {'type' : 'QToolButton', 'height' : height_filter_function}\n        )\n        ```\n    \"\"\"\n    if selector is None:\n        selector = {}\n    object_reference = _get_object_reference(object_or_name)\n    parent = object.parent(object_reference)\n\n    if parent is None:\n        return None\n    else:\n        siblings = list(object.children(parent))\n        siblings.remove(object_reference)\n        return tuple(filter(lambda x: _is_matching(x, selector), siblings))\n</code></pre>"},{"location":"reference/object_tree/#squape.object_tree.wait_for_any_object","title":"wait_for_any_object","text":"<pre><code>wait_for_any_object(object_names, timeout=squish.testSettings.waitForObjectTimeout / 1000, retry_delay=0.5)\n</code></pre> <p>Wait for any accessible object from the provided object names list to become available (exists, visible, enabled) within a specified timeout.</p> <p>Parameters:</p> Name Type Description Default <code>object_names</code> <code>list</code> <p>A list of names of the objects to wait for.</p> required <code>timeout</code> <code>int</code> <p>The maximum time in seconds to wait for any object to become available. Defaults to squish.testSettings.waitForObjectTimeout/1000.</p> <code>waitForObjectTimeout / 1000</code> <code>retry_delay</code> <code>float</code> <p>The time in seconds to wait before</p> <code>0.5</code> <p>Returns:</p> Name Type Description <code>object</code> <p>The first object that becomes available within the specified timeout.</p> <p>Raises:</p> Type Description <code>LookupError</code> <p>If none of the objects become available within the specified timeout.</p> <code>ValueError</code> <p>If object_names list is empty</p> Source code in <code>squape/object_tree.py</code> <pre><code>def wait_for_any_object(\n    object_names: list,\n    timeout=squish.testSettings.waitForObjectTimeout / 1000,\n    retry_delay: float = 0.5,\n):\n    \"\"\"\n    Wait for any accessible object from the provided object names list to become\n    available (exists, visible, enabled) within a specified timeout.\n\n    Args:\n        object_names (list): A list of names of the objects to wait for.\n        timeout (int, optional): The maximum time in seconds to wait for\n            any object to become available.\n            Defaults to squish.testSettings.waitForObjectTimeout/1000.\n        retry_delay (float, optional): The time in seconds to wait before\n        retrying the Squish lookup function. Defaults to 0.5.\n\n    Returns:\n        object: The first object that becomes available within the specified timeout.\n\n    Raises:\n        LookupError: If none of the objects become available within\n            the specified timeout.\n        ValueError: If object_names list is empty\n    \"\"\"\n    return _wait_for_any_object(\n        squish.waitForObject, object_names, timeout, retry_delay=retry_delay\n    )\n</code></pre>"},{"location":"reference/object_tree/#squape.object_tree.wait_for_any_object_exists","title":"wait_for_any_object_exists","text":"<pre><code>wait_for_any_object_exists(object_names, timeout=squish.testSettings.waitForObjectTimeout / 1000, retry_delay=0.5)\n</code></pre> <p>Wait for object from the provided object names list to become available (exists) within a specified timeout.</p> <p>Parameters:</p> Name Type Description Default <code>object_names</code> <code>list</code> <p>A list of names of the objects to wait for.</p> required <code>timeout</code> <code>int</code> <p>The maximum time in seconds to wait for any object to become available. Defaults to squish.testSettings.waitForObjectTimeout/1000.</p> <code>waitForObjectTimeout / 1000</code> <code>retry_delay</code> <code>float</code> <p>The time in seconds to wait before retrying the Squish lookup function. Defaults to 0.5.</p> <code>0.5</code> <p>Returns:</p> Name Type Description <code>object</code> <p>The first object that becomes available within the specified timeout.</p> <p>Raises:</p> Type Description <code>LookupError</code> <p>If none of the objects become available within the specified timeout.</p> <code>ValueError</code> <p>If object_names list is empty</p> Source code in <code>squape/object_tree.py</code> <pre><code>def wait_for_any_object_exists(\n    object_names: list,\n    timeout=squish.testSettings.waitForObjectTimeout / 1000,\n    retry_delay: float = 0.5,\n):\n    \"\"\"\n    Wait for object from the provided object names list to become\n    available (exists) within a specified timeout.\n\n    Args:\n        object_names (list): A list of names of the objects to wait for.\n        timeout (int, optional): The maximum time in seconds to wait for\n            any object to become available.\n            Defaults to squish.testSettings.waitForObjectTimeout/1000.\n        retry_delay (float, optional): The time in seconds to wait before\n            retrying the Squish lookup function. Defaults to 0.5.\n\n    Returns:\n        object: The first object that becomes available within the specified timeout.\n\n    Raises:\n        LookupError: If none of the objects become available within\n            the specified timeout.\n        ValueError: If object_names list is empty\n    \"\"\"\n    return _wait_for_any_object(\n        squish.waitForObjectExists, object_names, timeout, retry_delay=retry_delay\n    )\n</code></pre>"},{"location":"reference/report/","title":"squape.report","text":""},{"location":"reference/report/#squape.report.section","title":"section","text":"<pre><code>section(title, description='')\n</code></pre> <p>Allows using Squish's sections as context managers and function decorators https://doc.qt.io/squish/squish-api.html#test-startsection-function</p> <pre><code>description (str): Optional additional description of the section\n</code></pre> <p>Examples:</p> <pre><code>with section(\"Add new person\"):\n    squish.type(squish.waitForObject(names.forename_edit), \"Bob\")\n    squish.mouseClick(squish.waitForObject(names.ok_button))\n</code></pre> Source code in <code>squape/report.py</code> <pre><code>def __init__(self, title, description=\"\"):\n    \"\"\"\n    Args:\n        title (str): Section title\n        description (str): Optional additional description of the section\n\n    Examples:\n        ```python\n        with section(\"Add new person\"):\n            squish.type(squish.waitForObject(names.forename_edit), \"Bob\")\n            squish.mouseClick(squish.waitForObject(names.ok_button))\n        ```\n    \"\"\"\n    self.title = title\n    self.description = description\n</code></pre>"},{"location":"reference/report/#squape.report.debug","title":"debug","text":"<pre><code>debug(msg, details='')\n</code></pre> <p>Adds a DEBUG-level log entry with the given message and details to a test report.</p> <p>This function adds a log message to Squish's test report at the DEBUG log level, which allows for detailed debugging information to be recorded. The log message will include the given message and details provided as arguments. The message will be prefixed with the string 'DEBUG: ' to indicate its log level.</p> <p>The log message will only be visible if the LOGLEVEL is set to DEBUG. Otherwise, it will be ignored and not included in the test report.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to include in the log entry.</p> required <code>details</code> <code>str</code> <p>Optional additional details to include in the log entry.</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/report.py</code> <pre><code>def debug(msg: str, details: str = \"\") -&gt; None:\n    \"\"\"Adds a DEBUG-level log entry with the given message and details to a test report.\n\n    This function adds a log message to Squish's test report at the DEBUG log level,\n    which allows for detailed debugging information to be recorded.\n    The log message will include the given message and details provided as arguments.\n    The message will be prefixed with the string 'DEBUG: ' to indicate its log level.\n\n    The log message will only be visible if the LOGLEVEL is set to DEBUG.\n    Otherwise, it will be ignored and not included in the test report.\n\n    Args:\n        msg (str): The message to include in the log entry.\n        details (str): Optional additional details to include in the log entry.\n\n    Returns:\n        None\n    \"\"\"\n    if __is_level_enabled(LogLevel.DEBUG):\n        test.fixateResultContext(1)\n        try:\n            _test_log(f\"[DEBUG] {msg}\", details)\n        finally:\n            test.restoreResultContext()\n</code></pre>"},{"location":"reference/report/#squape.report.enable_loglevel_in_test_module","title":"enable_loglevel_in_test_module","text":"<pre><code>enable_loglevel_in_test_module()\n</code></pre> <p>Adds support for log levels to the Squish 'test' module.</p> <p>Warning</p> <p>This function uses monkey pathching https://en.wikipedia.org/wiki/Monkey_patch</p> <p>This function overwrites some of the existing functions in the 'test' module to support logging at different log levels. Furthermore, it enhances the functionality of the 'test' module by adding a new test.debug(...) function.</p> <p>By default, the 'test' module does not support LOGLEVEL at all. However, this function adds support for setting the log level to a higher or lower level, depending on the needs of the developer.</p> <p>After calling this function, the following 'test' module's functions will support LOGLEVEL report setting:</p> <pre><code>- test.debug(...)\n- test.log(...)\n- test.warning(...)\n- test.fail(...)\n- test.fatal(...)\n</code></pre> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/report.py</code> <pre><code>def enable_loglevel_in_test_module() -&gt; None:\n    \"\"\"Adds support for log levels to the Squish 'test' module.\n\n    !!! warning\n        This function uses monkey pathching\n        https://en.wikipedia.org/wiki/Monkey_patch\n\n    This function overwrites some of the existing functions in the 'test' module\n    to support logging at different log levels.\n    Furthermore, it enhances the functionality of the 'test' module by adding\n    a new test.debug(...) function.\n\n    By default, the 'test' module does not support LOGLEVEL at all.\n    However, this function adds support for setting the log level to a higher\n    or lower level, depending on the needs of the developer.\n\n    After calling this function, the following 'test' module's functions will support\n    LOGLEVEL report setting:\n\n        - test.debug(...)\n        - test.log(...)\n        - test.warning(...)\n        - test.fail(...)\n        - test.fatal(...)\n\n    Returns:\n        None\n    \"\"\"\n    test.debug = debug\n    test.log = log\n    test.warning = warning\n    test.fail = fail\n    test.fatal = fatal\n</code></pre>"},{"location":"reference/report/#squape.report.fail","title":"fail","text":"<pre><code>fail(msg, details='')\n</code></pre> <p>Adds a fail entry with the given message and details to a test report.</p> <p>This function adds a fail message to Squish's test report at the FAIL log level or lower, depending on the current log level setting. The fail message will include the given message and details provided as arguments.</p> <p>The fail message will only be visible if the LOGLEVEL is set to FAIL or lower. Otherwise, it will be ignored and not included in the test report.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to include in the fail entry.</p> required <code>details</code> <code>str</code> <p>Optional additional details to include in the fail entry.</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/report.py</code> <pre><code>def fail(msg: str, details: str = \"\") -&gt; None:\n    \"\"\"Adds a fail entry with the given message and details to a test report.\n\n    This function adds a fail message to Squish's test report at the FAIL log level\n    or lower, depending on the current log level setting.\n    The fail message will include the given message and details provided as arguments.\n\n    The fail message will only be visible if the LOGLEVEL is set to FAIL or lower.\n    Otherwise, it will be ignored and not included in the test report.\n\n    Args:\n        msg (str): The message to include in the fail entry.\n        details (str): Optional additional details to include in the fail entry.\n\n    Returns:\n        None\n    \"\"\"\n    if __is_level_enabled(LogLevel.FAIL):\n        test.fixateResultContext(1)\n        try:\n            _test_fail(msg, details)\n        finally:\n            test.restoreResultContext()\n</code></pre>"},{"location":"reference/report/#squape.report.fatal","title":"fatal","text":"<pre><code>fatal(msg, details='')\n</code></pre> <p>Adds a fatal entry with the given message and details to a test report, then aborts the test case execution.</p> <p>This function adds a fatal message to Squish's test report at the FATAL log level or lower, depending on the current log level setting. The fatal message will include the given message and details provided as arguments.</p> <p>The fatal message will only be visible if the LOGLEVEL is set to FATAL or lower. Otherwise, it will be ignored and not included in the test report.</p> <p>After adding the fatal message, the function aborts the test case execution.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to include in the fatal entry.</p> required <code>details</code> <code>str</code> <p>Optional additional details to include in the fatal entry.</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/report.py</code> <pre><code>def fatal(msg: str, details: str = \"\") -&gt; None:\n    \"\"\"Adds a fatal entry with the given message and details to a test report,\n    then aborts the test case execution.\n\n    This function adds a fatal message to Squish's test report at the FATAL log level\n    or lower, depending on the current log level setting.\n    The fatal message will include the given message and details provided as arguments.\n\n    The fatal message will only be visible if the LOGLEVEL is set to FATAL or lower.\n    Otherwise, it will be ignored and not included in the test report.\n\n    After adding the fatal message, the function aborts the test case execution.\n\n    Args:\n        msg (str): The message to include in the fatal entry.\n        details (str): Optional additional details to include in the fatal entry.\n\n    Returns:\n        None\n    \"\"\"\n    if __is_level_enabled(LogLevel.FATAL):\n        test.fixateResultContext(1)\n        try:\n            squish.testSettings.throwOnFailure = True\n            _test_fatal(msg, details)\n        finally:\n            test.restoreResultContext()\n</code></pre>"},{"location":"reference/report/#squape.report.log","title":"log","text":"<pre><code>log(msg, details='')\n</code></pre> <p>Adds a log entry with the given message and details to a test report.</p> <p>This function adds a log message to Squish's test report at the LOG log level or lower, depending on the current log level setting. The log message will include the given message and details provided as arguments.</p> <p>The log message will only be visible if the LOGLEVEL is set to LOG or lower. Otherwise, it will be ignored and not included in the test report.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to include in the log entry.</p> required <code>details</code> <code>str</code> <p>Optional additional details to include in the log entry.</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/report.py</code> <pre><code>def log(msg: str, details: str = \"\") -&gt; None:\n    \"\"\"Adds a log entry with the given message and details to a test report.\n\n    This function adds a log message to Squish's test report at the LOG log level\n    or lower, depending on the current log level setting.\n    The log message will include the given message and details provided as arguments.\n\n    The log message will only be visible if the LOGLEVEL is set to LOG or lower.\n    Otherwise, it will be ignored and not included in the test report.\n\n    Args:\n        msg (str): The message to include in the log entry.\n        details (str): Optional additional details to include in the log entry.\n\n    Returns:\n        None\n    \"\"\"\n    if __is_level_enabled(LogLevel.LOG):\n        test.fixateResultContext(1)\n        try:\n            _test_log(msg, details)\n        finally:\n            test.restoreResultContext()\n</code></pre>"},{"location":"reference/report/#squape.report.set_level","title":"set_level","text":"<pre><code>set_level(level)\n</code></pre> <p>Sets the Squish logging level, Level must be an int or a str.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int | str</code> <p>log level to set</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; set_level(report.LogLevel.WARNING)\n&gt;&gt;&gt; set_level(\"FAIL\")\n</code></pre> Source code in <code>squape/report.py</code> <pre><code>def set_level(level) -&gt; None:\n    \"\"\"Sets the Squish logging level, Level must be an int or a str.\n\n    Args:\n        level (int|str): log level to set\n\n    Examples:\n       &gt;&gt;&gt; set_level(report.LogLevel.WARNING)\n       &gt;&gt;&gt; set_level(\"FAIL\")\n    \"\"\"\n    global LOGLEVEL\n    LOGLEVEL = __translate_Level(level)\n</code></pre>"},{"location":"reference/report/#squape.report.warning","title":"warning","text":"<pre><code>warning(msg, details='')\n</code></pre> <p>Adds a warning entry with the given message and details to a test report.</p> <p>This function adds a warning message to Squish's test report at the WARNING log level or lower, depending on the current log level setting. The warning message will include the given message and details provided as arguments.</p> <p>The warning message will only be visible if the LOGLEVEL is set to WARNING or lower. Otherwise, it will be ignored and not included in the test report.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to include in the warning entry.</p> required <code>details</code> <code>str</code> <p>Optional additional details to include in the warning entry.</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/report.py</code> <pre><code>def warning(msg: str, details: str = \"\") -&gt; None:\n    \"\"\"Adds a warning entry with the given message and details to a test report.\n\n    This function adds a warning message to Squish's test report at the WARNING\n    log level or lower, depending on the current log level setting.\n    The warning message will include the given message and details provided\n    as arguments.\n\n    The warning message will only be visible if the LOGLEVEL is set to WARNING or lower.\n    Otherwise, it will be ignored and not included in the test report.\n\n    Args:\n        msg (str): The message to include in the warning entry.\n        details (str): Optional additional details to include in the warning entry.\n\n    Returns:\n        None\n    \"\"\"\n    if __is_level_enabled(LogLevel.WARNING):\n        test.fixateResultContext(1)\n        try:\n            _test_warning(msg, details)\n        finally:\n            test.restoreResultContext()\n</code></pre>"},{"location":"reference/settings/","title":"squape.settings","text":""},{"location":"reference/settings/#squape.settings.breakOnFailure","title":"breakOnFailure","text":"<pre><code>breakOnFailure(enabled=True)\n</code></pre> <p>Allows using breakOnFailure test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-breakonfailure</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable the debugger to stop on every failed verification</p> <code>True</code> <p>Examples:</p> <pre><code>with breakOnFailure():\n    # code with verifications\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef breakOnFailure(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using breakOnFailure test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-breakonfailure\n\n    Args:\n        enabled (bool): Whether to enable the debugger to stop\n            on every failed verification\n\n    Examples:\n        ```python\n        with breakOnFailure():\n            # code with verifications\n        ```\n    \"\"\"\n    with _ctx_settings(\"breakOnFailure\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.defaultOcrLanguage","title":"defaultOcrLanguage","text":"<pre><code>defaultOcrLanguage(language)\n</code></pre> <p>Allows using defaultOcrLanguage test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-defaultocrlanguage</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>str</code> <p>string text representing the Language to be used for OCR Text search</p> required <p>Examples:</p> <pre><code>with defaultOcrLanguage(\"Polish\"):\n    waitForOcrText(\"Dom\")\n    waitForOcrText(\"Miasto\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef defaultOcrLanguage(language: str) -&gt; None:\n    \"\"\"Allows using defaultOcrLanguage test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-defaultocrlanguage\n\n    Args:\n        language (str): string text representing the Language to be used\n            for OCR Text search\n\n    Examples:\n        ```python\n        with defaultOcrLanguage(\"Polish\"):\n            waitForOcrText(\"Dom\")\n            waitForOcrText(\"Miasto\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"defaultOcrLanguage\", language):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.imageNotFoundDebugging","title":"imageNotFoundDebugging","text":"<pre><code>imageNotFoundDebugging(enabled)\n</code></pre> <p>Allows using imageNotFoundDebugging test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-imagenotfounddebugging</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable debugging when image is not found.</p> required <p>Examples:</p> <pre><code>with imageNotFoundDebugging(False):\n    waitForImage(\"image1.png\")\n    waitForImage(\"image2.png\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef imageNotFoundDebugging(enabled: bool) -&gt; None:\n    \"\"\"Allows using imageNotFoundDebugging test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-imagenotfounddebugging\n\n    Args:\n        enabled (bool): Whether to enable debugging when image is not found.\n\n    Examples:\n        ```python\n        with imageNotFoundDebugging(False):\n            waitForImage(\"image1.png\")\n            waitForImage(\"image2.png\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"imageNotFoundDebugging\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.imageSearchMaxScale","title":"imageSearchMaxScale","text":"<pre><code>imageSearchMaxScale(max_scale)\n</code></pre> <p>Allows using imageSearchMaxScale test setting as context managers. https://doc.qt.io/squish/squish-api.html#number-testsettings-imagesearchmaxscale</p> <p>Parameters:</p> Name Type Description Default <code>max_scale</code> <code>float</code> <p>A float value indicating the maximum scale for image search.</p> required <p>Examples:</p> <pre><code>with imageSearchMultiscale(), imageSearchMaxScale(150):\n    test.imagePresent(\"image1.png\")\n    test.imagePresent(\"image2.png\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef imageSearchMaxScale(max_scale: float) -&gt; None:\n    \"\"\"Allows using imageSearchMaxScale test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#number-testsettings-imagesearchmaxscale\n\n    Args:\n        max_scale (float): A float value indicating the maximum scale for image search.\n\n    Examples:\n        ```python\n        with imageSearchMultiscale(), imageSearchMaxScale(150):\n            test.imagePresent(\"image1.png\")\n            test.imagePresent(\"image2.png\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"imageSearchMaxScale\", max_scale):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.imageSearchMinScale","title":"imageSearchMinScale","text":"<pre><code>imageSearchMinScale(min_scale)\n</code></pre> <p>Allows using imageSearchMinScale test setting as context managers. https://doc.qt.io/squish/squish-api.html#number-testsettings-imagesearchminscale</p> <p>Parameters:</p> Name Type Description Default <code>min_scale</code> <code>float</code> <p>A float value indicating the minimum scale for image search.</p> required <p>Examples:</p> <pre><code>with imageSearchMultiscale(), imageSearchMinScale(75):\n    test.imagePresent(\"image1.png\")\n    test.imagePresent(\"image2.png\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef imageSearchMinScale(min_scale: float) -&gt; None:\n    \"\"\"Allows using imageSearchMinScale test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#number-testsettings-imagesearchminscale\n\n    Args:\n        min_scale (float): A float value indicating the minimum scale for image search.\n\n    Examples:\n        ```python\n        with imageSearchMultiscale(), imageSearchMinScale(75):\n            test.imagePresent(\"image1.png\")\n            test.imagePresent(\"image2.png\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"imageSearchMinScale\", min_scale):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.imageSearchMultiscale","title":"imageSearchMultiscale","text":"<pre><code>imageSearchMultiscale(enabled=True)\n</code></pre> <p>Allows using imageSearchMultiscale test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-imagesearchmultiscale</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether multi-scale image search is enabled. Defaulting to True</p> <code>True</code> <p>Examples:</p> <pre><code>with imageSearchMultiscale(), imageSearchMaxScale(150):\n    test.imagePresent(\"image1.png\")\n    test.imagePresent(\"image2.png\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef imageSearchMultiscale(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using imageSearchMultiscale test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-imagesearchmultiscale\n\n    Args:\n        enabled (bool): Whether multi-scale image search is enabled. Defaulting to True\n\n    Examples:\n        ```python\n        with imageSearchMultiscale(), imageSearchMaxScale(150):\n            test.imagePresent(\"image1.png\")\n            test.imagePresent(\"image2.png\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"imageSearchMultiscale\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.imageSearchThreshold","title":"imageSearchThreshold","text":"<pre><code>imageSearchThreshold(threshold)\n</code></pre> <p>Allows using imageSearchThreshold test setting as context managers. https://doc.qt.io/squish/squish-api.html#number-testsettings-imagesearchthreshold</p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>the threshold for image search.</p> required <p>Examples:</p> <pre><code>with imageSearchTolerant(), imageSearchThreshold(95):\n    test.imagePresent(\"image.png\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef imageSearchThreshold(threshold: float) -&gt; None:\n    \"\"\"Allows using imageSearchThreshold test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#number-testsettings-imagesearchthreshold\n\n    Args:\n        threshold (float): the threshold for image search.\n\n    Examples:\n        ```python\n        with imageSearchTolerant(), imageSearchThreshold(95):\n            test.imagePresent(\"image.png\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"imageSearchThreshold\", threshold):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.imageSearchTolerant","title":"imageSearchTolerant","text":"<pre><code>imageSearchTolerant(enabled=True)\n</code></pre> <p>Allows using imageSearchTolerant test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-imagesearchtolerant</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether image search with tolerance is enabled. Defaulting to True.</p> <code>True</code> <p>Examples:</p> <pre><code>with imageSearchTolerant(), imageSearchThreshold(95):\n    test.imagePresent()\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef imageSearchTolerant(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using imageSearchTolerant test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-imagesearchtolerant\n\n    Args:\n        enabled (bool): Whether image search with tolerance is enabled.\n            Defaulting to True.\n\n    Examples:\n        ```python\n        with imageSearchTolerant(), imageSearchThreshold(95):\n            test.imagePresent()\n        ```\n    \"\"\"\n    with _ctx_settings(\"imageSearchTolerant\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.logScreenshotOnFail","title":"logScreenshotOnFail","text":"<pre><code>logScreenshotOnFail(enabled=True)\n</code></pre> <p>Allows using logScreenshotOnFail test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-logscreenshotonfail</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>A boolean value indicating whether to enable logging of screenshots on FAIL test result. Defaulting to True.</p> <code>True</code> <p>Examples:</p> <pre><code>with logScreenshotOnFail():\n    # code with verifications\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef logScreenshotOnFail(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using logScreenshotOnFail test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-logscreenshotonfail\n\n    Args:\n        enabled (bool): A boolean value indicating whether to enable logging\n            of screenshots on FAIL test result. Defaulting to True.\n\n    Examples:\n        ```python\n        with logScreenshotOnFail():\n            # code with verifications\n        ```\n    \"\"\"\n\n    with _ctx_settings(\"logScreenshotOnFail\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.logScreenshotOnPass","title":"logScreenshotOnPass","text":"<pre><code>logScreenshotOnPass(enabled=True)\n</code></pre> <p>Allows using logScreenshotOnPass test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-logscreenshotonpass</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>A boolean value indicating whether to enable logging of screenshots on PASS test result. Defaulting to True.</p> <code>True</code> <p>Examples:</p> <pre><code>with logScreenshotOnPass():\n    # code with verifications\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef logScreenshotOnPass(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using logScreenshotOnPass test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-logscreenshotonpass\n\n    Args:\n        enabled (bool): A boolean value indicating whether to enable logging\n            of screenshots on PASS test result. Defaulting to True.\n\n    Examples:\n        ```python\n        with logScreenshotOnPass():\n            # code with verifications\n        ```\n    \"\"\"\n    with _ctx_settings(\"logScreenshotOnPass\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.logScreenshotOnWarning","title":"logScreenshotOnWarning","text":"<pre><code>logScreenshotOnWarning(enabled=True)\n</code></pre> <p>Allows using logScreenshotOnWarning test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-logscreenshotonwarning</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>A boolean value indicating whether to enable logging of screenshots on warning log entry. Defaulting to True.</p> <code>True</code> <p>Examples:</p> <pre><code>with logScreenshotOnWarning():\n    # code where warning messages might happen\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef logScreenshotOnWarning(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using logScreenshotOnWarning test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-logscreenshotonwarning\n\n    Args:\n        enabled (bool): A boolean value indicating whether to enable logging\n            of screenshots on warning log entry. Defaulting to True.\n\n    Examples:\n        ```python\n        with logScreenshotOnWarning():\n            # code where warning messages might happen\n        ```\n    \"\"\"\n    with _ctx_settings(\"logScreenshotOnWarning\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.objectNotFoundDebugging","title":"objectNotFoundDebugging","text":"<pre><code>objectNotFoundDebugging(enabled)\n</code></pre> <p>Allows using objectNotFoundDebugging test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-objectnotfounddebugging</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable debugging when object is not found.</p> required <p>Examples:</p> <pre><code>with objectNotFoundDebugging(False):\n    waitForObject(names.obj1)\n    waitForObject(names.obj2)\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef objectNotFoundDebugging(enabled: bool) -&gt; None:\n    \"\"\"Allows using objectNotFoundDebugging test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-objectnotfounddebugging\n\n    Args:\n        enabled (bool): Whether to enable debugging when object is not found.\n\n    Examples:\n        ```python\n        with objectNotFoundDebugging(False):\n            waitForObject(names.obj1)\n            waitForObject(names.obj2)\n        ```\n    \"\"\"\n    with _ctx_settings(\"objectNotFoundDebugging\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.retryDuration","title":"retryDuration","text":"<pre><code>retryDuration(duration_ms)\n</code></pre> <p>Allows using retryDuration test setting as context managers. https://doc.qt.io/squish/squish-api.html#integer-testsettings-retryduration</p> <p>Parameters:</p> Name Type Description Default <code>duration_ms</code> <code>int</code> <p>The duration in milliseconds after which the verification fails</p> required <p>Examples:</p> <pre><code>with retryDuration(5000):\n    test.vp(\"VP1\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef retryDuration(duration_ms: int) -&gt; None:\n    \"\"\"Allows using retryDuration test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#integer-testsettings-retryduration\n\n    Args:\n        duration_ms (int): The duration in milliseconds after which\n            the verification fails\n\n    Examples:\n        ```python\n        with retryDuration(5000):\n            test.vp(\"VP1\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"retryDuration\", duration_ms):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.silentVerifications","title":"silentVerifications","text":"<pre><code>silentVerifications(enabled=True)\n</code></pre> <p>Allows using silentVerifications test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-silentverifications</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether silent verifications are enabled. Defaulting to True</p> <code>True</code> <p>Examples:</p> <pre><code>with silentVerifications():\n    # code with test.vp statements\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef silentVerifications(enabled: bool = True) -&gt; None:\n    \"\"\"Allows using silentVerifications test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-silentverifications\n\n    Args:\n        enabled (bool): Whether silent verifications are enabled. Defaulting to True\n\n    Examples:\n        ```python\n        with silentVerifications():\n            # code with test.vp statements\n        ```\n    \"\"\"\n    with _ctx_settings(\"silentVerifications\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.textNotFoundDebugging","title":"textNotFoundDebugging","text":"<pre><code>textNotFoundDebugging(enabled)\n</code></pre> <p>Allows using textNotFoundDebugging test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-textnotfounddebugging</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable debugging when a OCR Text is not found.</p> required <p>Examples:</p> <pre><code>with textNotFoundDebugging(False):\n    waitForOcrText(\"Frog\")\n    waitForOcrText(\"Alpaca\")\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef textNotFoundDebugging(enabled: bool) -&gt; None:\n    \"\"\"Allows using textNotFoundDebugging test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-textnotfounddebugging\n\n    Args:\n        enabled (bool): Whether to enable debugging when a OCR Text is not found.\n\n    Examples:\n        ```python\n        with textNotFoundDebugging(False):\n            waitForOcrText(\"Frog\")\n            waitForOcrText(\"Alpaca\")\n        ```\n    \"\"\"\n    with _ctx_settings(\"textNotFoundDebugging\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.throwOnFailure","title":"throwOnFailure","text":"<pre><code>throwOnFailure(enabled)\n</code></pre> <p>Allows using throwOnFailure test setting as context managers. https://doc.qt.io/squish/squish-api.html#bool-testsettings-throwonfailure</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable to raise a script error on every failed verification</p> required <p>Examples:</p> <pre><code>with throwOnFailure():\n    # code with verifications\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef throwOnFailure(enabled: bool) -&gt; None:\n    \"\"\"Allows using throwOnFailure test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#bool-testsettings-throwonfailure\n\n    Args:\n        enabled (bool): Whether to enable to raise a script error\n            on every failed verification\n\n    Examples:\n        ```python\n        with throwOnFailure():\n            # code with verifications\n        ```\n    \"\"\"\n    with _ctx_settings(\"throwOnFailure\", enabled):\n        yield\n</code></pre>"},{"location":"reference/settings/#squape.settings.waitForObjectTimeout","title":"waitForObjectTimeout","text":"<pre><code>waitForObjectTimeout(timeout_ms)\n</code></pre> <p>Allows using waitForObjectTimeout test setting as context managers. https://doc.qt.io/squish/squish-api.html#integer-testsettings-waitforobjecttimeout</p> <p>Parameters:</p> Name Type Description Default <code>timeout_ms</code> <code>int</code> <p>A integer value indicating the timeout in ms.</p> required <p>Examples:</p> <pre><code>with waitForObjectTimeout(500):\n    waitForObject(names.obj1)\n    waitForObject(names.obj2)\n</code></pre> Source code in <code>squape/settings.py</code> <pre><code>@contextmanager\ndef waitForObjectTimeout(timeout_ms: int) -&gt; None:\n    \"\"\"Allows using waitForObjectTimeout test setting as context managers.\n    https://doc.qt.io/squish/squish-api.html#integer-testsettings-waitforobjecttimeout\n\n    Args:\n        timeout_ms (int): A integer value indicating the timeout in ms.\n\n    Examples:\n        ```python\n        with waitForObjectTimeout(500):\n            waitForObject(names.obj1)\n            waitForObject(names.obj2)\n        ```\n    \"\"\"\n    with _ctx_settings(\"waitForObjectTimeout\", timeout_ms):\n        yield\n</code></pre>"},{"location":"reference/squishserver/","title":"squape.squishserver","text":""},{"location":"reference/squishserver/#squape.squishserver.SquishServer","title":"SquishServer","text":"<pre><code>SquishServer(location=None, host=None, port=None)\n</code></pre> <p>Class to configure a running local or remote squishserver</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>The location of the Squish package. If provided, this value will be used. If not provided, it will be taken from the squishserver process.</p> <code>None</code> <code>host</code> <code>str</code> <p>The host of the squishserver. If provided, this value will be used. If not provided, the value of the squishrunner's \"--host\" will be used if set. If \"--host\" was not set, the default value \"127.0.0.1\" will be used.</p> <code>None</code> <code>port</code> <code>int</code> <p>The port of the squishserver. If provided, this value will be used. If not provided, the value of the squishrunner's \"--port\" will be used if set. If \"--port\" was not set, the default value \"4322\" will be used.</p> <code>None</code> Source code in <code>squape/squishserver.py</code> <pre><code>def __init__(self, location=None, host=None, port=None):\n    \"\"\"Open an RemoteSystem connection to a running squishserver\n\n    Args:\n        location (str, optional): The location of the Squish package.\n            If provided, this value will be used.\n            If not provided, it will be taken from the squishserver process.\n        host (str, optional): The host of the squishserver.\n            If provided, this value will be used.\n            If not provided, the value of the squishrunner's \"--host\"\n            will be used if set.\n            If \"--host\" was not set, the default value \"127.0.0.1\" will be used.\n        port (int, optional): The port of the squishserver.\n            If provided, this value will be used.\n            If not provided, the value of the squishrunner's \"--port\"\n            will be used if set.\n            If \"--port\" was not set, the default value \"4322\" will be used.\n    \"\"\"\n\n    if host is None:\n        self._host = os.environ.get(\"SQUISHRUNNER_HOST\", \"127.0.0.1\")\n    else:\n        self._host = host\n\n    if port is None:\n        if \"SQUISHRUNNER_PORT\" in os.environ:\n            self._port = int(os.environ[\"SQUISHRUNNER_PORT\"])\n        else:\n            self._port = 4322\n    else:\n        self._port = port\n\n    try:\n        self._remotesys = RemoteSystem(self.host, self.port)\n    except Exception:\n        raise SquishserverError(\n            f\"Unable to connect to squishserver ({self.host}:{self.port})\"\n        )\n\n    if location is None:\n        try:\n            self._location = self.remotesys.getEnvironmentVariable(\"SQUISH_PREFIX\")\n        except KeyError:\n            raise EnvironmentError(\n                \"The SQUISH_PREFIX environment variable is not set, \"\n                \"and location of the squishserver \"\n                f\"({self.host}:{self.port}) is not specified!\"\n            )\n    else:\n        self._location = location\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.host","title":"host  <code>property</code>","text":"<pre><code>host\n</code></pre> <p>The host of the squishserver.</p>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.location","title":"location  <code>property</code>","text":"<pre><code>location\n</code></pre> <p>The location of the Squish package.</p>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.os_name","title":"os_name  <code>property</code>","text":"<pre><code>os_name\n</code></pre> <p>Name of the Operating System where the squishserver is running.</p>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.port","title":"port  <code>property</code>","text":"<pre><code>port\n</code></pre> <p>The port of the squishserver.</p>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.remotesys","title":"remotesys  <code>property</code>","text":"<pre><code>remotesys\n</code></pre> <p>RemoteSystem of the squishserver.</p>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.addAUT","title":"addAUT","text":"<pre><code>addAUT(aut, path)\n</code></pre> <p>Register an AUT</p> <p>Parameters:</p> Name Type Description Default <code>aut</code> <code>str</code> <p>the name of the executable</p> required <code>path</code> <code>str</code> <p>path to the executable folder</p> required Source code in <code>squape/squishserver.py</code> <pre><code>def addAUT(self, aut: str, path: str) -&gt; None:\n    \"\"\"Register an AUT\n\n    Args:\n        aut (str): the name of the executable\n        path (str): path to the executable folder\n    \"\"\"\n    log(\n        f\"[Squishserver {self.host}:{self.port}] \"\n        f\"Registering {Path(path)/aut} AUT\"\n    )\n    self._config_squishserver(\"addAUT\", [aut, path])\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.addAppPath","title":"addAppPath","text":"<pre><code>addAppPath(path)\n</code></pre> <p>Register an AUT path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>the AUT path to register</p> required Source code in <code>squape/squishserver.py</code> <pre><code>def addAppPath(self, path: str) -&gt; None:\n    \"\"\"Register an AUT path\n\n    Args:\n        path (str): the AUT path to register\n    \"\"\"\n    log(f\"[Squishserver {self.host}:{self.port}] \" f\"Registering AUT path: {path}\")\n    self._config_squishserver(\"addAppPath\", [path])\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.addAttachableAut","title":"addAttachableAut","text":"<pre><code>addAttachableAut(aut, port, host='127.0.0.1')\n</code></pre> <p>Register an attachable AUT</p> <p>Parameters:</p> Name Type Description Default <code>aut</code> <code>str</code> <p>the name of the attachable AUT</p> required <code>port</code> <code>int</code> <p>port of the machine where the attachable AUT         is supposed to be running.</p> required <code>host</code> <code>str</code> <p>host of the machine where the attachable AUT                     is supposed to be running.                     Defaults to \"127.0.0.1\".</p> <code>'127.0.0.1'</code> Source code in <code>squape/squishserver.py</code> <pre><code>def addAttachableAut(self, aut: str, port: int, host: str = \"127.0.0.1\") -&gt; None:\n    \"\"\"Register an attachable AUT\n\n    Args:\n        aut (str): the name of the attachable AUT\n        port (int): port of the machine where the attachable AUT\n                    is supposed to be running.\n        host (str, optional):   host of the machine where the attachable AUT\n                                is supposed to be running.\n                                Defaults to \"127.0.0.1\".\n    \"\"\"\n    log(\n        f\"[Squishserver {self.host}:{self.port}] \"\n        f\"Registering an attachable AUT {aut}\"\n    )\n    self._config_squishserver(\"addAttachableAUT\", [aut, f\"{host}:{port}\"])\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.attachToApplication","title":"attachToApplication","text":"<pre><code>attachToApplication(aut)\n</code></pre> <p>Attaches to an application with given name.</p> <p>Parameters:</p> Name Type Description Default <code>aut</code> <code>str</code> <p>the name of the attachable AUT</p> required <p>Returns:</p> Type Description <code>ApplicationContext</code> <p>application context</p> Source code in <code>squape/squishserver.py</code> <pre><code>def attachToApplication(self, aut: str):\n    \"\"\"\n    Attaches to an application with given name.\n\n    Args:\n        aut (str): the name of the attachable AUT\n\n    Returns:\n        (ApplicationContext): application context\n    \"\"\"\n    log(f\"[Squishserver {self.host}:{self.port}] \" f\"Attach to application {aut}\")\n    ctx = squish.attachToApplication(aut, self.host, self.port)\n    return ctx\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.execute_cmd_async","title":"execute_cmd_async","text":"<pre><code>execute_cmd_async(command, options=None)\n</code></pre> <p>Executes the command with optional arguments asynchronously. This convenience function runs a command as is, leveraging the environment settings provided by the squishserver.</p> <p>For more advanced use cases, such as specifying a custom current working directory (cwd) or environment variables, please use the <code>squishserver.remotesys.execute(...)</code> method directly.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute</p> required <code>options</code> <code>List[str]</code> <p>A list of options for the command</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>squape/squishserver.py</code> <pre><code>def execute_cmd_async(self, command: str, options: List[str] = None) -&gt; None:\n    \"\"\"Executes the command with optional arguments asynchronously.\n    This convenience function runs a command as is, leveraging the environment\n    settings provided by the squishserver.\n\n    For more advanced use cases, such as specifying a custom current working\n    directory (cwd) or environment variables, please use the\n    `squishserver.remotesys.execute(...)` method directly.\n\n    Args:\n        command (str): The command to execute\n        options (List[str]): A list of options for the command\n\n    Returns:\n        None\n    \"\"\"\n    options = options or []\n    if self.os_name == \"Windows\":\n        cmd = [\"cmd.exe\", \"/s\", \"/c\", \"start\", \"\", \"/min\", command, *options]\n    else:\n        cmd = [\"sh\", \"-c\", f\"{command} {' '.join(options)} &gt;/dev/null 2&gt;&amp;1 &amp;\"]\n    self.remotesys.execute(cmd)\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.execute_cmd_sync","title":"execute_cmd_sync","text":"<pre><code>execute_cmd_sync(command, options=None)\n</code></pre> <p>Executes the command with optional arguments synchronously. This convenience function runs a command as is, leveraging the environment settings provided by the squishserver.</p> <p>For more advanced use cases, such as specifying a custom current working directory (cwd) or environment variables, please use the <code>squishserver.remotesys.execute(...)</code> method directly.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute</p> required <code>options</code> <code>List[str]</code> <p>A list of options for the command</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>A list/array with three elements: exitcode, stdout, stderr</p> Source code in <code>squape/squishserver.py</code> <pre><code>def execute_cmd_sync(self, command: str, options: List[str] = None) -&gt; List[str]:\n    \"\"\"Executes the command with optional arguments synchronously.\n    This convenience function runs a command as is, leveraging the environment\n    settings provided by the squishserver.\n\n    For more advanced use cases, such as specifying a custom current working\n    directory (cwd) or environment variables, please use the\n    `squishserver.remotesys.execute(...)` method directly.\n\n    Args:\n        command (str): The command to execute\n        options (List[str]): A list of options for the command\n\n    Returns:\n        A list/array with three elements: exitcode, stdout, stderr\n    \"\"\"\n    cmd = [command] + (options or [])\n    return self.remotesys.execute(cmd)\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.removeAUT","title":"removeAUT","text":"<pre><code>removeAUT(aut, path)\n</code></pre> <p>Remove registered AUT</p> <p>Parameters:</p> Name Type Description Default <code>aut</code> <code>str</code> <p>the name of the executable</p> required <code>path</code> <code>str</code> <p>path to the executable folder</p> required Source code in <code>squape/squishserver.py</code> <pre><code>def removeAUT(self, aut: str, path: str) -&gt; None:\n    \"\"\"Remove registered AUT\n\n    Args:\n        aut (str): the name of the executable\n        path (str): path to the executable folder\n    \"\"\"\n    log(\n        f\"[Squishserver {self.host}:{self.port}] \"\n        f\"Removing registered {Path(path)/aut} AUT\"\n    )\n    self._config_squishserver(\"removeAUT\", [aut, path])\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.removeAppPath","title":"removeAppPath","text":"<pre><code>removeAppPath(path)\n</code></pre> <p>Remove a registered AUT path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>the path to the AUT</p> required Source code in <code>squape/squishserver.py</code> <pre><code>def removeAppPath(self, path: str) -&gt; None:\n    \"\"\"Remove a registered AUT path\n\n    Args:\n        path (str): the path to the AUT\n    \"\"\"\n    log(\n        f\"[Squishserver {self.host}:{self.port}] \"\n        f\"Removing registered AUT path: {path}\"\n    )\n    self._config_squishserver(\"removeAppPath\", [path])\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.removeAttachableAut","title":"removeAttachableAut","text":"<pre><code>removeAttachableAut(aut, port, host='127.0.0.1')\n</code></pre> <p>Remove registered attachable AUT</p> <p>Parameters:</p> Name Type Description Default <code>aut</code> <code>str</code> <p>the name of the attachable AUT</p> required <code>port</code> <code>int</code> <p>port of the machine where the attachable AUT         is supposed to be running.</p> required <code>host</code> <code>str</code> <p>host of the machine where the attachable AUT                     is supposed to be running.                     Defaults to \"127.0.0.1\".</p> <code>'127.0.0.1'</code> Source code in <code>squape/squishserver.py</code> <pre><code>def removeAttachableAut(self, aut: str, port: int, host: str = \"127.0.0.1\") -&gt; None:\n    \"\"\"Remove registered attachable AUT\n\n    Args:\n        aut (str): the name of the attachable AUT\n        port (int): port of the machine where the attachable AUT\n                    is supposed to be running.\n        host (str, optional):   host of the machine where the attachable AUT\n                                is supposed to be running.\n                                Defaults to \"127.0.0.1\".\n    \"\"\"\n    log(\n        f\"[Squishserver {self.host}:{self.port}] \"\n        f\"Removing registered attachable AUT {aut}\"\n    )\n    self._config_squishserver(\"removeAttachableAUT\", [aut, f\"{host}:{port}\"])\n</code></pre>"},{"location":"reference/squishserver/#squape.squishserver.SquishServer.startApplication","title":"startApplication","text":"<pre><code>startApplication(aut)\n</code></pre> <p>Starts to an application with given name.</p> <p>Parameters:</p> Name Type Description Default <code>aut</code> <code>str</code> <p>the name of the mapped AUT</p> required <p>Returns:</p> Type Description <code>ApplicationContext</code> <p>application context</p> Source code in <code>squape/squishserver.py</code> <pre><code>def startApplication(self, aut: str):\n    \"\"\"\n    Starts to an application with given name.\n\n    Args:\n        aut (str): the name of the mapped AUT\n\n    Returns:\n        (ApplicationContext): application context\n    \"\"\"\n    log(f\"[Squishserver {self.host}:{self.port}] \" f\"Start an application {aut}\")\n    ctx = squish.startApplication(aut, self.host, self.port)\n    return ctx\n</code></pre>"},{"location":"reference/video/","title":"squape.video","text":""},{"location":"reference/video/#squape.video.remove_videos_on_success","title":"remove_videos_on_success","text":"<pre><code>remove_videos_on_success()\n</code></pre> <p>Remove all captured videos when the execution was successful (no failures)</p> <p>Warning</p> <p>Removing videos on success does not work with Squish 7.1.1 and below when execution is triggered outside the Squish IDE.</p> Source code in <code>squape/video.py</code> <pre><code>def remove_videos_on_success() -&gt; None:\n    \"\"\"\n    Remove all captured videos when the execution was successful (no failures)\n\n    !!! warning\n        Removing videos on success does not work with Squish 7.1.1 and below\n        when execution is triggered outside the Squish IDE.\n    \"\"\"\n    if _failure_results_count() == 0:\n        videos_to_remove = _videos_set()\n        _replace_videos(videos_to_remove)\n</code></pre>"},{"location":"reference/video/#squape.video.video_capture","title":"video_capture","text":"<pre><code>video_capture(message='', remove_on_success=False)\n</code></pre> <p>Allows using Squish's video capture as context managers. https://doc.qt.io/squish/squish-api.html#test-startvideocapture-message Optionally (when the execution was successful) replace captured video with a tiny placeholder video to save test results size.</p> <p>Warning</p> <p>Removing videos on success does not work with Squish 7.1.1 and below when execution is triggered outside the Squish IDE.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>log a video n the test report using the specified message. Defaulting to empty string.</p> <code>''</code> <code>remove_on_success</code> <code>bool</code> <p>Whether to replace captured video when there were no failures. Defaulting to False.</p> <code>False</code> <p>Examples:</p> <pre><code>with video_capture(remove_on_success=True):\n    # code with actions and verifications\n</code></pre> Source code in <code>squape/video.py</code> <pre><code>@contextmanager\ndef video_capture(message: str = \"\", remove_on_success: bool = False) -&gt; None:\n    \"\"\"Allows using Squish's video capture as context managers.\n    https://doc.qt.io/squish/squish-api.html#test-startvideocapture-message\n    Optionally (when the execution was successful) replace captured video\n    with a tiny placeholder video to save test results size.\n\n    !!! warning\n        Removing videos on success does not work with Squish 7.1.1 and below\n        when execution is triggered outside the Squish IDE.\n\n    Args:\n        message (str): log a video n the test report using the specified message.\n            Defaulting to empty string.\n        remove_on_success (bool): Whether to replace captured video\n            when there were no failures. Defaulting to False.\n\n    Examples:\n        ```python\n        with video_capture(remove_on_success=True):\n            # code with actions and verifications\n        ```\n    \"\"\"\n\n    if remove_on_success:\n        initial_videos = _videos_set()\n        initial_result_count = _failure_results_count()\n\n    test.startVideoCapture(message)\n\n    try:\n        yield\n    except Exception:\n        raise\n    finally:\n        test.stopVideoCapture(message)\n\n        if remove_on_success:\n            new_failures = _failure_results_count() - initial_result_count\n            if new_failures == 0:\n                new_videos = _videos_set() - initial_videos\n                _replace_videos(new_videos)\n</code></pre>"},{"location":"reference/vps/","title":"squape.vps","text":""},{"location":"reference/vps/#squape.vps.vph_property","title":"vph_property","text":"<pre><code>vph_property(object_or_name, property_name, expected_value, msg)\n</code></pre> <p>Highlights the object then verifies its property. The object remains highlighted during verification to make it easier to identify on potential screenshots.</p> <p>Parameters:</p> Name Type Description Default <code>object_or_name</code> <code>any</code> <p>symbolic name, real name, or object reference</p> required <code>property_name</code> <code>str</code> <p>name of the property to verify</p> required <code>expected_value</code> <code>any</code> <p>expected value of the verified property</p> required <code>msg</code> <code>str</code> <p>verification message</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if verification is positive, False otherwise</p> Source code in <code>squape/vps.py</code> <pre><code>def vph_property(\n    object_or_name: any, property_name: str, expected_value: any, msg: str\n) -&gt; bool:\n    \"\"\"Highlights the object then verifies its property.\n    The object remains highlighted during verification to make it easier to identify\n    on potential screenshots.\n\n    Args:\n        object_or_name (any): symbolic name, real name, or object reference\n        property_name (str): name of the property to verify\n        expected_value (any): expected value of the verified property\n        msg (str): verification message\n\n    Returns:\n        True if verification is positive, False otherwise\n    \"\"\"\n\n    obj = squish.waitForObjectExists(object_or_name)\n    property_value = operator.attrgetter(property_name)(obj)\n    squish.highlightObject(obj, 200, False)\n    result = test.compare(property_value, expected_value, msg)\n    time.sleep(0.200)\n    return result\n</code></pre>"}]}